grammar Dice
  rule expression
    ws? additive ws? { def value; additive.value; end }
  end

  rule parens
    '(' inner:expression ')'  <ParenthesisExpression>
  end

  rule multitive
    left:primary right:(ws? operator:multitive_op ws? operand:primary)* <BinaryOperation>
  end

  rule additive
    left:multitive right:(ws? operator:additive_op ws? operand:multitive)* <BinaryOperation>
  end

  rule primary
    parens / dice_group / number
  end

  rule additive_op
    '+' <BinaryOperators::Addition> / '-' <BinaryOperators::Substraction>
  end

  rule multitive_op
    '*' <BinaryOperators::Multiplication> / '/' <BinaryOperators::Division>
  end

  rule dice_group
    quantity:(number?) 'd' faces:number <Group>
  end

  rule number
    [1-9] [0-9]* {
      def value
        text_value.to_i
      end
    }
  end

  rule ws
    [ \t]+
  end
end
